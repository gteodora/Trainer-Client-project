@model TrainerClientADOnet.Models.DTO.TrainingDTO
@using System.Data;
@using TrainerClientADOnet.Models.DTO;
@using Microsoft.AspNet.Identity;
@using System.Web;
@using System.Web.Mvc;
@using TrainerClientADOnet.Utilities;

    <head>
        @section Scripts{
            <script type="text/javascript" src="@Url.Content("~/Scripts/jquery-3.3.1.min.js")"></script>
            <script type="text/javascript">

                function copyToClipboard(message) {
                    var msg = message;
                    console.log(msg);
                    //use msg now
                    var $temp = $("<input>");
                    $("body").append($temp);
                    $temp.val(msg).select();
                    document.execCommand("copy");
                    $temp.remove();
                };
            </script>
        }
    </head>

@{
    ViewBag.Title = "TrainingPlanForProgram";
    //konstante u header-u tabele:
    var firstDay = DayOfWeek.Monday;
    var secondDay = DayOfWeek.Tuesday;
    var thirdDay = DayOfWeek.Wednesday;
    var fourthDay = DayOfWeek.Thursday;
    var fifthDay = DayOfWeek.Friday;
    var sixthDay = DayOfWeek.Saturday;
    var seventhDay = DayOfWeek.Sunday;

    //zbog promjene sedmice:
    var pickedWeekMondayDate = ViewBag.SelectedMonday;
    var pickedWeekTuesdayDate = ((DateTime)ViewBag.SelectedMonday).AddDays(1);
    var pickedWeekWednesdayDate = ((DateTime)ViewBag.SelectedMonday).AddDays(2);
    var pickedWeekFridayDate = ((DateTime)ViewBag.SelectedMonday).AddDays(4);
    var pickedWeekThursdayDate = ((DateTime)ViewBag.SelectedMonday).AddDays(3);
    var pickedWeekSaturdayDate = ((DateTime)ViewBag.SelectedMonday).AddDays(5);
    var pickedWeekSundayDate = ((DateTime)ViewBag.SelectedMonday).AddDays(6);
    //uri
    Uri uri = new Uri(HttpContext.Current.Request.Url.AbsoluteUri);
    var programIdFromUri = HttpUtility.ParseQueryString(uri.Query).Get("programId").Trim();
    //ime i prezime klijenta:
    string fullName = Utility.GetFullNameByProgramId(int.Parse(programIdFromUri));


    var previousMonday = Utility.previousMonday(ViewBag.SelectedMonday);
    var nextMonday = Utility.nextMonday(ViewBag.SelectedMonday);
}

<h2>
    Training plan for client
    <b>@fullName </b>
</h2>

@* Dugmad za prebacivanje na sledecu i prethodnu sedmicu *@
<button type="button" onclick="location.href='@Url.Action("TrainingPlanForProgram", "Training", new { programId = programIdFromUri, monday = previousMonday })'">
    <img alt="Previous" title="Previous week" src="~/Images/Button/left.png" style="width: 15px; height:20px">
</button>
<button type="button" onclick="location.href='@Url.Action("TrainingPlanForProgram", "Training", new { programId = programIdFromUri, monday  = nextMonday })'">

    <img alt="Next" title="Next week" src="~/Images/Button/right.png" style="width: 15px; height:20px">
</button>


@if (@pickedWeekMondayDate.ToString("MMMM").Equals(@pickedWeekSundayDate.ToString("MMMM")))
{//prikaz: July 20 - 27, 20
    <h3>
        @pickedWeekMondayDate.ToString("MMMM") @pickedWeekMondayDate.ToString("dd") - @pickedWeekSundayDate.ToString("dd"), @pickedWeekSundayDate.ToString("yy")
    </h3>
}
else //prikaz: July 27 - August 02, 20
{
    if (@pickedWeekMondayDate.ToString("yy").Equals(@pickedWeekSundayDate.ToString("yy")))
    {
        <h3>
            @pickedWeekMondayDate.ToString("MMMM")  @pickedWeekMondayDate.ToString("dd") - @pickedWeekSundayDate.ToString("MMMM") @pickedWeekSundayDate.ToString("dd"), @pickedWeekSundayDate.ToString("yy")
        </h3>
    }
    else //prikaz: December 27, 2020 - Januar 02, 2021
    {
        <h3>
            @pickedWeekMondayDate.ToString("MMMM")  @pickedWeekMondayDate.ToString("dd"), @pickedWeekMondayDate.ToString("yyyy") - @pickedWeekSundayDate.ToString("MMMM") @pickedWeekSundayDate.ToString("dd"), @pickedWeekSundayDate.ToString("yyyy")
        </h3>

    }
}

@Html.Label("Treninzi sa trenerom", new { style = "background-color:#ffebcc" })
@Html.Label("Samostalni trening", new { style = "background-color:#ffffcc" })

<style>
    a.btnCreate:link {
        /*background-image: "~/Images/Button/arrow_previous.png";*/
        background: url(~/Images/Button/arrow_previous.png) no-repeat top left;
        background-image: "~/Images/Button/arrow_previous.png";
        /* display: none;*/
    }
    /*
      td:hover + btnCreate{
        display: inline-block!important;
        background: red!important;
    }*/
    td.actionCreate {
        zoom: 1;
        filter: alpha(opacity=0);
        opacity: 0;
    }

    td:hover {
        zoom: 1;
        filter: alpha(opacity=100);
        opacity: 1;
    }

    td.actionsAloneTraining {
        background-color: #ffebcc;
        filter: alpha(opacity=0);
    }
</style>

@functions{
    public HtmlString cell(TrainingDTO training)
    {
        Uri uri = new Uri(HttpContext.Current.Request.Url.AbsoluteUri);
        var programIdFromUri = HttpUtility.ParseQueryString(uri.Query).Get("programId").Trim();
        String result = "<td class=\"actionCreate\">" + @training.Description;
        var monday = ViewBag.SelectedMonday;

        if (training.TrainingTypeId == 2) //sa trenerom
        {
            result = "<td style=\"background-color:#ffebcc;  \">" + @training.Description;
        }
        else if (training.TrainingTypeId == 1) //samostalno
        {
            result = "<td style=\"background-color:#ffffcc; \">" + @training.Description;
        }

        String createUrl = (@Url.Action("Create", "Training", new { id = training.Id, startTime = training.StartTime, endTime = training.EndTime, trainingTypeId = training.TrainingTypeId, programId = programIdFromUri })).ToString();
        //String button za Create
        String createButton = "<button type=\"button\" onclick=\" 'createUrl'  \">" + //"<button type=\"button\" onclick=\"location.href="+"BLA"+"\">" +
                  " <img alt=\"CreateTraining\" title=\"CreateTraining\" src=\"~/Images/Button/arrow_previous.png\" />" +
                "</button>";


        String create = (@Html.ActionLink("+", "Create", new { id = training.Id, monday = monday, startTime = training.StartTime, endTime = training.EndTime, trainingTypeId = training.TrainingTypeId, programId = programIdFromUri }, new { @class = "btnCreate" })).ToString();
        String edit = (@Html.ActionLink("Edit", "Edit", new { id = training.Id, monday = monday, startTime = training.StartTime, endTime = training.EndTime, trainingTypeId = training.TrainingTypeId, programId = training.ProgramId })).ToString();
        String details = (@Html.ActionLink("Details", "Details", new { id = training.Id, monday = monday, startTime = training.StartTime, endTime = training.EndTime, trainingTypeId = training.TrainingTypeId, programId = programIdFromUri })).ToString();



        var description = @training.Description;
        var image =@Url.Content("~/Images/Button/cb5.png");
       //     description=description.TrimEnd();
        String copy = " <button type=\"button\" id=\"copyButton\" runat=\"server\" onClick=\" copyToClipboard(\'"+description+"\'); \" style=\"background-color: Transparent; border: none;\" >  <img src=\""+image+"\" style=\"height:20px;width:15px;color:blue\" title=\"Copy to clipboard description\" /> </button>"; // @* *@



        if (User.IsInRole(Utility.TRAINER_ROLE))
        {
            if (training.Id > 0)
            {
                if (Utility.IsWrittenAlreadyThisTraining(training.ProgramId, training.Description, training.StartTime, training.TrainingTypeId)) //ako je trening sa ovim osobinama, ali MANJEG SATA vec upisan, onda nista ne prikazi sem boje
                {//Ako je u celiju tabele ovaj trening vec upisan i ima Description i Edit u polju, onda ne treba vise pisati! Treninzi ispod ce samo biti obojeni kao i taj iznad.
                    if (training.TrainingTypeId == 2) //sa trenerom
                    {
                        return new HtmlString("<td style=\"background-color:#ffebcc; \">" + "</td>"); //todo: dodam i delete dugme ako je zadnji trening na spisku (zbog edit forme nema smisla da se brise neki u sredini)
                    }
                    else if (training.TrainingTypeId == 1) //samostalno
                    {

                        return new HtmlString("<td style=\"background-color:#ffffcc; \">" + "</td>"); //todo: dodam i delete dugme ako je zadnji trening na spisku (zbog edit forme nema smisla da se brise neki u sredini)
                    }
                }
                return new HtmlString(result + edit + copy + "</td>"); //todo: dodam i delete dugme (jer je ovo sig prvi red ako ima vise treninga)
            }
            else
            {
                return new HtmlString(result + create + "</td>");
            }
        }
        else if (@training.Description != null)
        {
            return new HtmlString(result + details + "</td>");
        }
        return new HtmlString("<td></td>");
    }
}
<table class="table" border="1">
    <tr>
        <th>
            @String.Empty
        </th>
        <th>
            @firstDay.ToString()
            <p>
                @pickedWeekMondayDate.ToString("dd")
            </p>
        </th>
        <th>
            @secondDay.ToString()
            <p>
                @pickedWeekTuesdayDate.ToString("dd")
            </p>
        </th>
        <th>
            @thirdDay.ToString()
            <p>
                @pickedWeekWednesdayDate.ToString("dd")
            </p>
        </th>
        <th>
            @fourthDay.ToString()
            <p>
                @pickedWeekThursdayDate.ToString("dd")
            </p>
        </th>
        <th>
            @fifthDay.ToString()
            <p>
                @pickedWeekFridayDate.ToString("dd")
            </p>
        </th>
        <th>
            @sixthDay.ToString()
            <p>
                @pickedWeekSaturdayDate.ToString("dd")
            </p>
        </th>
        <th>
            @seventhDay.ToString()

            <p>
                @pickedWeekSundayDate.ToString("dd")
            </p>
        </th>
    </tr>

    @{
        TrainingDTO[] eightToNine = (TrainingDTO[])ViewBag.Tranings[0];
        <tr>
            <td><b>8h</b></td>
            @foreach (TrainingDTO training in (TrainingDTO[])eightToNine)
            {
                @cell(training)
            }
        </tr>

        TrainingDTO[] nineToTen = (TrainingDTO[])ViewBag.Tranings[1];
        <tr>
            <td><b>9h</b></td>
            @foreach (TrainingDTO training in (TrainingDTO[])nineToTen)
            {
                @cell(training)
            }
        </tr>

        TrainingDTO[] tenToEleven = (TrainingDTO[])ViewBag.Tranings[2];
        <tr>
            <td><b>10h</b></td>
            @foreach (TrainingDTO training in (TrainingDTO[])tenToEleven)
            {
                @cell(training)
            }
        </tr>

        TrainingDTO[] elevenToTwelve = (TrainingDTO[])ViewBag.Tranings[3];
        <tr>
            <td><b>11h</b></td>
            @foreach (TrainingDTO training in (TrainingDTO[])elevenToTwelve)
            {
                @cell(training)
            }
        </tr>

        TrainingDTO[] twelveToThirteen = (TrainingDTO[])ViewBag.Tranings[4];
        <tr>
            <td><b>12h</b></td>
            @foreach (TrainingDTO training in (TrainingDTO[])twelveToThirteen)
            {
                @cell(training)
            }
        </tr>

        TrainingDTO[] thirteenToFourteen = (TrainingDTO[])ViewBag.Tranings[5];
        <tr>
            <td><b>13h</b></td>
            @foreach (TrainingDTO training in (TrainingDTO[])thirteenToFourteen)
            {
                @cell(training)
            }
        </tr>

        TrainingDTO[] fourteenToFifthteen = (TrainingDTO[])ViewBag.Tranings[6];
        <tr>
            <td><b>14h</b></td>
            @foreach (TrainingDTO training in (TrainingDTO[])fourteenToFifthteen)
            {
                @cell(training)
            }
        </tr>

        TrainingDTO[] fifthteenToSixteen = (TrainingDTO[])ViewBag.Tranings[7];
        <tr>
            <td><b>15h</b></td>
            @foreach (TrainingDTO training in (TrainingDTO[])fifthteenToSixteen)
            {
                @cell(training)
            }
        </tr>

        TrainingDTO[] sixteenToSeventeen = (TrainingDTO[])ViewBag.Tranings[8];
        <tr>
            <td><b>16h</b></td>
            @foreach (TrainingDTO training in (TrainingDTO[])sixteenToSeventeen)
            {
                @cell(training)
            }
        </tr>

        TrainingDTO[] seventeenToEighteen = (TrainingDTO[])ViewBag.Tranings[9];
        <tr>
            <td><b>17h</b></td>
            @foreach (TrainingDTO training in (TrainingDTO[])seventeenToEighteen)
            {
                @cell(training)
            }
        </tr>

        TrainingDTO[] eighteenToNineteen = (TrainingDTO[])ViewBag.Tranings[10];
        <tr>
            <td><b>18h</b></td>
            @foreach (TrainingDTO training in (TrainingDTO[])eighteenToNineteen)
            {
                @cell(training)
            }
        </tr>

        TrainingDTO[] nineteenToTwenty = (TrainingDTO[])ViewBag.Tranings[11];
        <tr>
            <td> <b> 19h </b></td>
            @foreach (TrainingDTO training in (TrainingDTO[])nineteenToTwenty)
            {
                @cell(training)
            }
        </tr>

        TrainingDTO[] twentyToTwentyone = (TrainingDTO[])ViewBag.Tranings[12];
        <tr>
            <td> <b>20h </b></td>
            @foreach (TrainingDTO training in (TrainingDTO[])twentyToTwentyone)
            {
                @cell(training)
            }
        </tr>

        TrainingDTO[] twentyoneToTwentytwo = (TrainingDTO[])ViewBag.Tranings[13];
        <tr>
            <td> <b> 21h</b></td>
            @foreach (TrainingDTO training in (TrainingDTO[])twentyoneToTwentytwo)
            {
                @cell(training)
            }
        </tr>
    }

</table>

@{

    var clientId = Utility.getClientIdForProgramId(programIdFromUri);
}
<p>

    @Html.ActionLink("Back to client's programs", "AllProgramsOfClient", "Program", new { clientId = clientId }, null)
</p>
